.TH "cuvis_imbuffer_t" 3 "Thu Jun 22 2023" "Version 3.2.0" "CUVIS C++ SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cuvis_imbuffer_t \- image buffer data structure with meta-data  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cuvis\&.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "uint8_t const  * \fBraw\fP"
.br
.RI "the memory reference of the cube\&. "
.ti -1c
.RI "uint32_t \fBbytes\fP"
.br
.RI "number of bytes per data element "
.ti -1c
.RI "uint32_t \fBlength\fP"
.br
.RI "total number of bytes in array "
.ti -1c
.RI "uint32_t \fBwidth\fP"
.br
.RI "width of buffer "
.ti -1c
.RI "uint32_t \fBheight\fP"
.br
.RI "height of buffer "
.ti -1c
.RI "uint16_t \fBchannels\fP"
.br
.RI "number of channels "
.ti -1c
.RI "\fBCUVIS_IMBUFFER_FORMAT\fP \fBformat\fP"
.br
.RI "the buffer format "
.ti -1c
.RI "uint32_t const  * \fBwavelength\fP"
.br
.RI "the wavelength vector "
.in -1c
.SH "Detailed Description"
.PP 
image buffer data structure with meta-data 

The image buffer data structure holds a anonymous raw data pointer, that can be interpreted to give a meaningful data array with the help of the other members: The \fBformat\fP gives the information of the data type, the \fBwidth\fP, \fBlength\fP, and \fBchannels\fP give the number of elements in the array\&.
.PP
The \fBwavelength\fP property is only set for hyperspectral cubes but not for normal images\&. If it exists, it is an array with the number of channels
.PP
Example: 
.PP
.nf
// format = CUVIS_IMBUFFER_FORMAT_UINT16
// x in [0, width)
// y in [0,   height)
// chn in [0, channels)
unsigned index = (y * width + x) * channels + chn;
uint16_t value = ((uint16_t*) raw)[index];
unsigned lambda = cube\&.wavelength[chn];

.fi
.PP
.PP
see also: \fBIMBUFFER_GET\fP 
.SH "Member Data Documentation"
.PP 
.SS "uint32_t cuvis_imbuffer_t::bytes"

.PP
number of bytes per data element 
.SS "uint16_t cuvis_imbuffer_t::channels"

.PP
number of channels 
.SS "\fBCUVIS_IMBUFFER_FORMAT\fP cuvis_imbuffer_t::format"

.PP
the buffer format The buffer format defines what the member \fBraw\fP can be casted into\&. 
.SS "uint32_t cuvis_imbuffer_t::height"

.PP
height of buffer 
.SS "uint32_t cuvis_imbuffer_t::length"

.PP
total number of bytes in array 
.SS "uint8_t const* cuvis_imbuffer_t::raw"

.PP
the memory reference of the cube\&. Valid as long as the parent element (e\&.g\&. measurement) is valid and unchanged\&. 
.SS "uint32_t const* cuvis_imbuffer_t::wavelength"

.PP
the wavelength vector If the \fBimbuffer\fP is not a hyperspectral cube, the value will be nullptr For cubes this is an array of length channels, the elements define the cube's wavelength in nanometers\&. 
.SS "uint32_t cuvis_imbuffer_t::width"

.PP
width of buffer 

.SH "Author"
.PP 
Generated automatically by Doxygen for CUVIS C++ SDK from the source code\&.
