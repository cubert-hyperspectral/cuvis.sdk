.TH "cuvis" 3 "Thu Jun 22 2023" "Version 3.2.0" "CUVIS C++ SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cuvis
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBaux\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAcquisitionContext\fP"
.br
.ti -1c
.RI "class \fBAsync\fP"
.br
.ti -1c
.RI "class \fBAsyncMesu\fP"
.br
.ti -1c
.RI "class \fBCalibration\fP"
.br
.RI "central calibration Class "
.ti -1c
.RI "struct \fBcommon_image_t\fP"
.br
.RI "Metaclass for handling image data (2d or 3d) "
.ti -1c
.RI "class \fBCubeExporter\fP"
.br
.ti -1c
.RI "class \fBcuvis_sdk_exception\fP"
.br
.ti -1c
.RI "struct \fBEnviArgs\fP"
.br
.ti -1c
.RI "class \fBEnviExporter\fP"
.br
.ti -1c
.RI "class \fBExporter\fP"
.br
.ti -1c
.RI "class \fBGeneral\fP"
.br
.ti -1c
.RI "struct \fBGeneralExportArgs\fP"
.br
.RI "Export Settings common to all exporters\&. "
.ti -1c
.RI "struct \fBimage_t\fP"
.br
.RI "Image data from a measurement\&. "
.ti -1c
.RI "class \fBMeasurement\fP"
.br
.RI "central measurement class "
.ti -1c
.RI "struct \fBMeasurementMetaData\fP"
.br
.RI "measurement meta structure "
.ti -1c
.RI "struct \fBProcessingArgs\fP"
.br
.RI "processing arguments "
.ti -1c
.RI "class \fBProcessingContext\fP"
.br
.ti -1c
.RI "struct \fBSaveArgs\fP"
.br
.RI "Options for saving cu3s/cu3 files\&. "
.ti -1c
.RI "struct \fBSensorInfoData\fP"
.br
.RI "sensor info data structure "
.ti -1c
.RI "class \fBSessionFile\fP"
.br
.ti -1c
.RI "struct \fBSessionInfo\fP"
.br
.ti -1c
.RI "struct \fBTiffArgs\fP"
.br
.RI "Additional settings for exporting tiff\&. "
.ti -1c
.RI "class \fBTiffExporter\fP"
.br
.ti -1c
.RI "struct \fBview_t\fP"
.br
.RI "Image data created from \fBViewExporter\fP\&. "
.ti -1c
.RI "struct \fBViewArgs\fP"
.br
.RI "viewer settings "
.ti -1c
.RI "class \fBViewer\fP"
.br
.ti -1c
.RI "class \fBViewExporter\fP"
.br
.ti -1c
.RI "class \fBWorker\fP"
.br
.ti -1c
.RI "struct \fBWorkerArgs\fP"
.br
.RI "settings for the worker "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBint_t\fP = \fBCUVIS_INT\fP"
.br
.ti -1c
.RI "using \fBevent_t\fP = \fBCUVIS_EVENT\fP"
.br
.ti -1c
.RI "using \fBloglevel_t\fP = \fBcuvis_loglevel_t\fP"
.br
.RI "The available log levels\&. "
.ti -1c
.RI "using \fBoperation_mode_t\fP = \fBcuvis_operation_mode_t\fP"
.br
.RI "Operation mode of a camera\&. "
.ti -1c
.RI "using \fBreference_type_t\fP = \fBcuvis_reference_type_t\fP"
.br
.RI "The type of a reference\&. "
.ti -1c
.RI "using \fBprocessing_mode_t\fP = \fBcuvis_processing_mode_t\fP"
.br
.RI "The processing mode (a\&.k\&.a\&. "
.ti -1c
.RI "using \fBpan_sharpening_interpolation_type_t\fP = \fBcuvis_pan_sharpening_interpolation_type_t\fP"
.br
.RI "the pan sharpening interpolation type for scaling up the cube before applying the pan image's weights "
.ti -1c
.RI "using \fBpan_sharpening_algorithm_t\fP = \fBcuvis_pan_sharpening_algorithm_t\fP"
.br
.RI "the pan-sharpening algorithm for calculating the pan image's weights "
.ti -1c
.RI "using \fBtiff_compression_mode_t\fP = \fBcuvis_tiff_compression_mode_t\fP"
.br
.RI "the tiff compression options "
.ti -1c
.RI "using \fBtiff_format_t\fP = \fBcuvis_tiff_format_t\fP"
.br
.RI "the tiff export format\&. "
.ti -1c
.RI "using \fBsession_info_t\fP = \fBcuvis_session_info_t\fP"
.br
.RI "internal session_info info of acquisition context "
.ti -1c
.RI "using \fBmesu_metadata_t\fP = \fBcuvis_mesu_metadata_t\fP"
.br
.RI "The measurement meta structure\&. "
.ti -1c
.RI "using \fBsensor_info_t\fP = \fBcuvis_sensor_info_t\fP"
.br
.ti -1c
.RI "using \fBhardware_state_t\fP = \fBcuvis_hardware_state_t\fP"
.br
.RI "the state of the hardware "
.ti -1c
.RI "using \fBcapabilities_t\fP = \fBcuvis_capabilities_t\fP"
.br
.ti -1c
.RI "using \fBtimestamp_t\fP = std::chrono::time_point< std::chrono::system_clock >"
.br
.RI "as timesamp use STL system clock "
.ti -1c
.RI "using \fBcpp_event_callback_t\fP = std::function< void(\fBevent_t\fP)>"
.br
.RI "The event call-back type must be of the format void fun(event_t) "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum class \fBasync_result_t\fP { \fBdone\fP, \fBtimeout\fP, \fBoverwritten\fP, \fBdeferred\fP }"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "using \fBcuvis::cpp_event_callback_t\fP = typedef std::function<void(\fBevent_t\fP)>"

.PP
The event call-back type must be of the format void fun(event_t) 
.SS "using \fBcuvis::timestamp_t\fP = typedef std::chrono::time_point<std::chrono::system_clock>"

.PP
as timesamp use STL system clock 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum class \fBcuvis::async_result_t\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIdone \fP\fP
.TP
\fB\fItimeout \fP\fP
.TP
\fB\fIoverwritten \fP\fP
.TP
\fB\fIdeferred \fP\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for CUVIS C++ SDK from the source code\&.
