.TH "cuvis::GeneralExportArgs" 3 "Thu Jun 22 2023" "Version 3.2.0" "CUVIS C++ SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cuvis::GeneralExportArgs \- Export Settings common to all exporters\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cuvis\&.hpp>\fP
.PP
Inherited by \fBcuvis::EnviArgs\fP, \fBcuvis::SaveArgs\fP, \fBcuvis::TiffArgs\fP, and \fBcuvis::ViewArgs\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGeneralExportArgs\fP ()"
.br
.RI "Constructor to create default parameters\&. "
.ti -1c
.RI "\fBoperator cuvis_export_general_settings_t\fP () const"
.br
.RI "convert to C - SDK settings structure "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::filesystem::path \fBexport_dir\fP"
.br
.RI "The directory where the files should be exported to (default: '\&.') "
.ti -1c
.RI "std::string \fBchannel_selection\fP"
.br
.RI "The selection of spectral channels to be exproted\&. "
.ti -1c
.RI "double \fBspectra_multiplier\fP"
.br
.RI "Multiply the spectrum before exporting\&. "
.ti -1c
.RI "double \fBpan_scale\fP"
.br
.RI "amount of pan-sharpening (default: 0) "
.ti -1c
.RI "\fBpan_sharpening_interpolation_type_t\fP \fBpan_interpolation_type\fP"
.br
.RI "The pansharpening interpolation type (default: \fBpan_sharpening_interpolation_type_Linear\fP) "
.ti -1c
.RI "\fBpan_sharpening_algorithm_t\fP \fBpan_algorithm\fP"
.br
.RI "The pansharpening algorithm (default: \fBpan_sharpening_algorithm_CubertMacroPixel\fP) "
.ti -1c
.RI "double \fBblend_opacity\fP"
.br
.RI "opacity for \fBpan_sharpening_algorithm_AlphablendPanOverlay\fP, give a value between 0 and 1 a value of 1\&.0 represents usage of 100% pan image, 0 will be 100% view image "
.ti -1c
.RI "bool \fBadd_pan\fP"
.br
.RI "Add the pan image to the output (default: \fBfalse\fP) "
.ti -1c
.RI "bool \fBadd_fullscale_pan\fP"
.br
.RI "Add a full-resolution pan image to the export (default: \fBfalse\fP) "
.ti -1c
.RI "bool \fBpermissive\fP"
.br
.RI "Set \fBExpor\fP ter to permisive mode (default: \fBfalse\fP) "
.in -1c
.SH "Detailed Description"
.PP 
Export Settings common to all exporters\&. 

The options of this structure can be set for any \fBExporter\fP\&. However, not all options are respected by the \fBExporter\fP\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "cuvis::GeneralExportArgs::GeneralExportArgs ()"

.PP
Constructor to create default parameters\&. 
.SH "Member Function Documentation"
.PP 
.SS "cuvis::GeneralExportArgs::operator \fBcuvis_export_general_settings_t\fP () const"

.PP
convert to C - SDK settings structure 
.SH "Member Data Documentation"
.PP 
.SS "bool cuvis::GeneralExportArgs::add_fullscale_pan"

.PP
Add a full-resolution pan image to the export (default: \fBfalse\fP) add full-resolution pan to exported image\&. If applicable, the image is added directly to the output\&. else, the image is stored separately\&. 
.SS "bool cuvis::GeneralExportArgs::add_pan"

.PP
Add the pan image to the output (default: \fBfalse\fP) add pan to exported image\&. If applicable, the pan image is scaled to target pan-sharpening resolution\&. 
.SS "double cuvis::GeneralExportArgs::blend_opacity"

.PP
opacity for \fBpan_sharpening_algorithm_AlphablendPanOverlay\fP, give a value between 0 and 1 a value of 1\&.0 represents usage of 100% pan image, 0 will be 100% view image 
.SS "std::string cuvis::GeneralExportArgs::channel_selection"

.PP
The selection of spectral channels to be exproted\&. (default : 'all')
.PP
The export channel selection 
.br
 Use 'all' or 'full' for all available channels
.PP
Use ranges for wavelength range start-end or start:end or start:step:end ; All values in Nanometers\&. Examples: 450:10:550 or 450-550 
.SS "std::filesystem::path cuvis::GeneralExportArgs::export_dir"

.PP
The directory where the files should be exported to (default: '\&.') 
.SS "\fBpan_sharpening_algorithm_t\fP cuvis::GeneralExportArgs::pan_algorithm"

.PP
The pansharpening algorithm (default: \fBpan_sharpening_algorithm_CubertMacroPixel\fP) for pansharpening use this interpolation type to scale up the cube before adjusting the weights As a first step to pan-sharpening the spectral data needs to be re-sanpled to the target resolution This parameter determines the method for this resanpling\&. 
.SS "\fBpan_sharpening_interpolation_type_t\fP cuvis::GeneralExportArgs::pan_interpolation_type"

.PP
The pansharpening interpolation type (default: \fBpan_sharpening_interpolation_type_Linear\fP) for pansharpening use this interpolation type to scale up the cube before adjusting the weights As a first step to pan-sharpening the spectral data needs to be re-sanpled to the target resolution This parameter determines the method for this resanpling\&. 
.SS "double cuvis::GeneralExportArgs::pan_scale"

.PP
amount of pan-sharpening (default: 0) amount of pan-sharpening The value is relative to the pan image size, give a value between 0 and 1 
.SS "bool cuvis::GeneralExportArgs::permissive"

.PP
Set \fBExpor\fP ter to permisive mode (default: \fBfalse\fP) Set exporter to 'permisive mode'\&. If set, errors will be skipped and alternative values assumed, wherever possible\&.
.PP
E\&.g\&., if \fBadd_pan\fP is selected but there is no panchromatic image avaialbe, the export is not possible\&. In permissive mode, however, the add_pan option is de-activated and an exprot without pan image is conducted instead\&.
.PP
\fBNote\fP
.RS 4
This mode may lead to unexpected behaviour and should be used with caution\&. 
.RE
.PP

.SS "double cuvis::GeneralExportArgs::spectra_multiplier"

.PP
Multiply the spectrum before exporting\&. multiply spectrum by fixed factor before exporting This is most usefull for bitshifting the data - especially when the pan image is also added to the export\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for CUVIS C++ SDK from the source code\&.
